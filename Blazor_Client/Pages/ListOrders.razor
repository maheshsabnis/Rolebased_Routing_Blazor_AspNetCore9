@page "/listorders"
@using Blazored.SessionStorage
@using Blazor_Client.Models

@inject ISessionStorageService session
@inject NavigationManager navigationManager
@inject HttpClient httpClient;


<h3>List Orders</h3>

<div class="container">
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <td>OrderId</td>
                <td>Customer Name</td>
                <td>Item Name</td>
                <td>Ordered Date</td>
                <td>Quantity</td>
                <td>TotalPrice</td>
                <td>Order Status</td>
                <td>Created By</td>
                <td>Updated By</td>
                <td>Updated Date</td>
                <td>Is Approved</td>
                <td>Comments</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in orders)
            {
                <tr>
                    <td>@item.OrderId</td>
                    <td>@item.CustomerName</td>
                    <td>@item.ItemName</td>
                    <td>@item.OrderedDate</td>
                    <td>@item.Quantity</td>
                    <td>@item.TotalPrice</td>
                    <td>@item.OrderStatus</td>
                    <td>@item.CreatedBy</td>
                    <td>@item.UpdatedBy</td>
                    <td>@item.UpdatedDate</td>
                    <td>@item.IsApproved</td>
                    <td>@item.Comments</td>
                    @if (roleName == "Manager")
                    {
                        <td>
                            <button class="btn btn-warning" @onclick="@(()=>navigateToEdit(item.OrderId))">Edit</button>
                            <button class="btn btn-danger" @onclick="@(()=>navigateToDelete(item.OrderId))">Delete</button>
                        </td>
                    }
                    @if (roleName == "Administrator")
                    {
                        <td>
                            <button class="btn btn-warning" @onclick="@(()=>navigateToEdit(item.OrderId))">Edit</button>
                            <button class="btn btn-danger" @onclick="@(()=>navigateToApproveOrReject(item.OrderId))">Approve Or Reject</button>
                            <button class="btn btn-dark" @onclick="@(()=>navigateToDelete(item.OrderId))">Delete</button>
                           
                        </td>
                    }
                </tr> 
            }
        </tbody>
    </table>
    <br/>
    <button class="btn btn-link" @onclick="navigateToHome">Home</button>
</div>


@code {
    private List<Order>? orders = new List<Order>();
    string url = "https://localhost:7291/api/orders";
    string roleName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Read the Role and Token from the session storage

        var currentUser = await session.GetItemAsync<string>("UserName");
        var token = await session.GetItemAsync<string>("authToken");
        roleName = await session.GetItemAsync<string>("RoleName");
        if (!string.IsNullOrEmpty(token) && !String.IsNullOrEmpty(currentUser) && !String.IsNullOrEmpty(roleName))
        {
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            orders = await httpClient.GetFromJsonAsync<List<Order>>(url);
        }
        else
        {
            navigationManager.NavigateTo("/accessdenied");
        }
    }

    private void navigateToEdit(int id)
    {
        navigationManager.NavigateTo($"/editorder/{id}");
    }
    private void navigateToDelete(int id)
    {
        navigationManager.NavigateTo($"/deleteorder/{id}");
    }
    private void navigateToApproveOrReject(int id)
    {
        navigationManager.NavigateTo($"/approveorder/{id}");
    }
    private void navigateToHome()
    {
        navigationManager.NavigateTo("/");
    }
}
