@page "/login"
@using Blazor_Client.Models
@using Blazored.SessionStorage
@using System.Text.Json
@inject HttpClient httpClient;
@inject NavigationManager navigationManager
@inject ISessionStorageService session;
<h3>Login</h3>

<div class="container">
    <div class="form-group">
        <label for="Email">Email:</label>
        <InputText @bind-Value="user.Email" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Password">Password:</label>
        <InputText @bind-Value="user.Password" type="password" class="form-control" />
    </div>
    <div class="btn-group-lg">
        <button class="btn btn-warning" @onclick="clear">Clear</button>
        <button class="btn btn-primary" @onclick="login">Login</button>
    </div>
    <hr/>
    @if (isLoginFailed)
    { 
        <div class="alert alert-danger">
            <strong>
                @errorMessage
            </strong>
            <button class="btn btn-warning" @onclick="gotohome">Go To Home Page</button>
        </div>
    }
</div>


@code {
    private LoginUser user = new LoginUser();
    string url = "https://localhost:7291/api/authuser";
    string errorMessage = string.Empty;
    private SecureResponse? securityResponse = new SecureResponse();
    bool isLoginFailed = false;
    private async Task login()
    {
        var response = await httpClient.PostAsJsonAsync<LoginUser>(url, user);

        if (response.IsSuccessStatusCode)
        {
            var receivedResponse = await response.Content.ReadAsStringAsync();
            securityResponse = JsonSerializer.Deserialize<SecureResponse>(receivedResponse);

            if (securityResponse?.StatucCode == 500)
            {
                errorMessage = $"The User {user.Email} is found, but role is not assigned to this user so the use cannot be authenticated";
                isLoginFailed = true;
            }
            else
            { 
                await session.SetItemAsync("authToken", securityResponse.Token);
                await session.SetItemAsync("RoleName", securityResponse.RoleName);
                await session.SetItemAsync("UserName", securityResponse.UserName);
                navigationManager.NavigateTo("/");
            }
        }
        else
        {
            errorMessage = "Login failed. Please check your credentials.";
        }
        this.StateHasChanged();
    }

    private void clear()
    {
        user = new LoginUser();
        errorMessage = string.Empty;
    }
    private void gotohome()
    {
        navigationManager.NavigateTo("/");
    }

}
