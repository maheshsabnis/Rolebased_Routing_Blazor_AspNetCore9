@page "/deleteorder"
@using Blazor_Client.Models
@using Blazored.SessionStorage
@inject HttpClient httpClient
@inject ISessionStorageService session;
@inject NavigationManager navigationManager

<h3>Delete Order</h3>

<div class="container">
  
        
        <div class="form-group">
            <label for="CustomerName">Customer Name</label>
            <InputText @bind-Value="order.CustomerName" class="form-control" readonly="readonly" />
        </div>
        <div class="form-group">
            <label for="ItemName">Item Name</label>
            <InputText @bind-Value="order.ItemName" class="form-control" readonly="readonly" />
        </div>
        <div class="form-group">
            <label for="OrderedDate">Ordered Date</label>
        <InputDate @bind-Value="order.OrderedDate" class="form-control" readonly="readonly" />
        </div>
        <div class="form-group">
            <label for="Quantity">Ordered Quantity</label>
              <InputNumber @bind-Value="order.Quantity" class="form-control" readonly="readonly" />
        </div>
        <div class="form-group">
            <label for="Comments">Comments</label>
            <InputTextArea @bind-Value="order.Comments" class="form-control" readonly="readonly" />
        </div>
        <div class="btn-group-lg">
            <button class="btn btn-warning" @onclick="Cancel">Clear</button>
        <button type="submit" class="btn btn-success" @onclick="DeleteRecord">Delete</button>
        </div>
    

</div>




@code {
    [Parameter]
    public int id { get; set; }
    private Order? order = new Order();
    string currentUser = string.Empty;
    string token = string.Empty;
    string roleName = string.Empty;
    private string url = "https://localhost:7291/api/deleteorder";
    private List<string> items = new List<string>()
    {
       "Laptop","Mobile","Charger","Charger Cable","USB","Power Bank","Laptop Charger","Screen","Router"
    };


    protected override async Task OnInitializedAsync()
    {
        currentUser = await session.GetItemAsStringAsync("UserName");
        token = await session.GetItemAsync<string>("authToken");
        roleName = await session.GetItemAsync<string>("RoleName");

        if (!string.IsNullOrEmpty(token) && !String.IsNullOrEmpty(currentUser) && !String.IsNullOrEmpty(roleName))
        {
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            order = await httpClient.GetFromJsonAsync<Order>($"https://localhost:7291/api/orders/{id}");

            if (order == null)
            {
                navigationManager.NavigateTo("/recordnotfound");
            }
        }
        else
        {
            navigationManager.NavigateTo("/accessdenied");
        }

    }



    private async Task DeleteRecord()
    {
        currentUser = await session.GetItemAsStringAsync("UserName");
        token = await session.GetItemAsync<string>("authToken");
        roleName = await session.GetItemAsync<string>("RoleName");
        if (!string.IsNullOrEmpty(token) && !String.IsNullOrEmpty(currentUser) && !String.IsNullOrEmpty(roleName))
        {

            if (roleName == "Administrator" || roleName == "Manager")
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);



                var response = await httpClient.DeleteFromJsonAsync<ResponseObject<Order>>($"{url}/{id}");
                if (response.StatusCode == 201)
                {
                    navigationManager.NavigateTo("/listorders");
                }
                else
                {
                    navigationManager.NavigateTo("/recordnotfound");
                }
            }
            else
            {
                navigationManager.NavigateTo("/accessdenied");
            }


        }
        else
        {
            navigationManager.NavigateTo("/accessdenied");
        }

    }

    private void Cancel()
    {
        navigationManager.NavigateTo("/listorders");
    }
}
